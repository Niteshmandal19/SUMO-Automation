EDGES - creating edges
---------------------------------------------------------
import openpyxl
from xml.etree.ElementTree import Element, SubElement, tostring
from xml.dom import minidom

def xlsx_to_edge_xml(xlsx_file, xml_file, sheet_name="Edges"):
    # Load the workbook
    wb = openpyxl.load_workbook(xlsx_file)
    
    # Select the Edges sheet
    if sheet_name not in wb.sheetnames:
        raise ValueError(f"Sheet '{sheet_name}' not found in the workbook.")
    sheet = wb[sheet_name]
    
    # Get column headers
    headers = [cell.value for cell in sheet[1]]
    
    # Create the root element
    edges = Element('edges')
    
    # Skip the header row
    for row in sheet.iter_rows(min_row=2, values_only=True):
        edge_data = dict(zip(headers, row))
        
        # Create an edge element
        edge = SubElement(edges, 'edge')
        
        # Required attributes
        edge.set('id', str(edge_data.get('Edge ID', '')))
        
        # Add ".0" to node IDs for 'from' and 'to' attributes
        from_node = str(edge_data.get('From Node', ''))
        to_node = str(edge_data.get('To Node', ''))
        edge.set('from', f"{from_node}.0")
        edge.set('to', f"{to_node}.0")
        
        # Optional attributes
        optional_attrs = [
            'Type', 'numLanes', 'Speed (m/s)', 'Priority', 'Length (m)',
            'Shape', 'SpreadType', 'Allow', 'Disallow', 'Width (m)', 'Name',
            'endOffset (m)', 'sidewalkWidth (m)', 'bikeLaneWidth (m)', 'distance (m)'
        ]
        
        attr_mapping = {
            'Type': 'type',
            'numLanes': 'numLanes',
            'Speed (m/s)': 'speed',
            'Priority': 'priority',
            'Length (m)': 'length',
            'Shape': 'shape',
            'SpreadType': 'spreadType',
            'Allow': 'allow',
            'Disallow': 'disallow',
            'Width (m)': 'width',
            'Name': 'name',
            'endOffset (m)': 'endOffset',
            'sidewalkWidth (m)': 'sidewalkWidth',
            'bikeLaneWidth (m)': 'bikeLaneWidth',
            'distance (m)': 'distance'
        }
        
        for xlsx_attr, xml_attr in attr_mapping.items():
            if xlsx_attr in edge_data and edge_data[xlsx_attr] is not None:
                edge.set(xml_attr, str(edge_data[xlsx_attr]))
    
    # Convert the ElementTree to a string
    rough_string = tostring(edges, 'utf-8')
    
    # Pretty-print the XML string
    reparsed = minidom.parseString(rough_string)
    pretty_xml = reparsed.toprettyxml(indent="  ")
    
    # Write to file
    with open(xml_file, "w") as f:
        f.write(pretty_xml)

# Usage
xlsx_to_edge_xml("data.xlsx", "edges.edg.xml")
